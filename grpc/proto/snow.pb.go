// Code generated by protoc-gen-go. DO NOT EDIT.
// source: snow.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NextRequest struct {
	ServiceId            int64    `protobuf:"varint,1,opt,name=serviceId,proto3" json:"serviceId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NextRequest) Reset()         { *m = NextRequest{} }
func (m *NextRequest) String() string { return proto.CompactTextString(m) }
func (*NextRequest) ProtoMessage()    {}
func (*NextRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cdb8d9edcdba34d, []int{0}
}

func (m *NextRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NextRequest.Unmarshal(m, b)
}
func (m *NextRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NextRequest.Marshal(b, m, deterministic)
}
func (m *NextRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NextRequest.Merge(m, src)
}
func (m *NextRequest) XXX_Size() int {
	return xxx_messageInfo_NextRequest.Size(m)
}
func (m *NextRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NextRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NextRequest proto.InternalMessageInfo

func (m *NextRequest) GetServiceId() int64 {
	if m != nil {
		return m.ServiceId
	}
	return 0
}

type NextReply struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NextReply) Reset()         { *m = NextReply{} }
func (m *NextReply) String() string { return proto.CompactTextString(m) }
func (*NextReply) ProtoMessage()    {}
func (*NextReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cdb8d9edcdba34d, []int{1}
}

func (m *NextReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NextReply.Unmarshal(m, b)
}
func (m *NextReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NextReply.Marshal(b, m, deterministic)
}
func (m *NextReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NextReply.Merge(m, src)
}
func (m *NextReply) XXX_Size() int {
	return xxx_messageInfo_NextReply.Size(m)
}
func (m *NextReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NextReply.DiscardUnknown(m)
}

var xxx_messageInfo_NextReply proto.InternalMessageInfo

func (m *NextReply) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*NextRequest)(nil), "snowflake.NextRequest")
	proto.RegisterType((*NextReply)(nil), "snowflake.NextReply")
}

func init() { proto.RegisterFile("snow.proto", fileDescriptor_4cdb8d9edcdba34d) }

var fileDescriptor_4cdb8d9edcdba34d = []byte{
	// 142 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0xce, 0xcb, 0x2f,
	0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x04, 0xb1, 0xd3, 0x72, 0x12, 0xb3, 0x53, 0x95,
	0xb4, 0xb9, 0xb8, 0xfd, 0x52, 0x2b, 0x4a, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x64,
	0xb8, 0x38, 0x8b, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x3d, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35,
	0x98, 0x83, 0x10, 0x02, 0x4a, 0xd2, 0x5c, 0x9c, 0x10, 0xc5, 0x05, 0x39, 0x95, 0x42, 0x7c, 0x5c,
	0x4c, 0x99, 0x30, 0x35, 0x4c, 0x99, 0x29, 0x46, 0xce, 0x5c, 0x9c, 0xc1, 0x30, 0x63, 0x85, 0xcc,
	0xb8, 0x58, 0x40, 0x2a, 0x85, 0xc4, 0xf4, 0xe0, 0x56, 0xe9, 0x21, 0xd9, 0x23, 0x25, 0x82, 0x21,
	0x5e, 0x90, 0x53, 0xa9, 0xc4, 0xe0, 0xc4, 0x1e, 0xc5, 0x0a, 0x76, 0x62, 0x12, 0x1b, 0x98, 0x32,
	0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xdf, 0x01, 0xea, 0xea, 0xb7, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SnowflakeClient is the client API for Snowflake service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SnowflakeClient interface {
	Next(ctx context.Context, in *NextRequest, opts ...grpc.CallOption) (*NextReply, error)
}

type snowflakeClient struct {
	cc *grpc.ClientConn
}

func NewSnowflakeClient(cc *grpc.ClientConn) SnowflakeClient {
	return &snowflakeClient{cc}
}

func (c *snowflakeClient) Next(ctx context.Context, in *NextRequest, opts ...grpc.CallOption) (*NextReply, error) {
	out := new(NextReply)
	err := c.cc.Invoke(ctx, "/snowflake.Snowflake/Next", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnowflakeServer is the server API for Snowflake service.
type SnowflakeServer interface {
	Next(context.Context, *NextRequest) (*NextReply, error)
}

// UnimplementedSnowflakeServer can be embedded to have forward compatible implementations.
type UnimplementedSnowflakeServer struct {
}

func (*UnimplementedSnowflakeServer) Next(ctx context.Context, req *NextRequest) (*NextReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Next not implemented")
}

func RegisterSnowflakeServer(s *grpc.Server, srv SnowflakeServer) {
	s.RegisterService(&_Snowflake_serviceDesc, srv)
}

func _Snowflake_Next_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnowflakeServer).Next(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snowflake.Snowflake/Next",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnowflakeServer).Next(ctx, req.(*NextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Snowflake_serviceDesc = grpc.ServiceDesc{
	ServiceName: "snowflake.Snowflake",
	HandlerType: (*SnowflakeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Next",
			Handler:    _Snowflake_Next_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "snow.proto",
}
