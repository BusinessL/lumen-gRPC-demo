// Code generated by protoc-gen-go. DO NOT EDIT.
// source: snow.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NextRequest struct {
	ServiceId            int64    `protobuf:"varint,1,opt,name=serviceId,proto3" json:"serviceId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NextRequest) Reset()         { *m = NextRequest{} }
func (m *NextRequest) String() string { return proto.CompactTextString(m) }
func (*NextRequest) ProtoMessage()    {}
func (*NextRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cdb8d9edcdba34d, []int{0}
}

func (m *NextRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NextRequest.Unmarshal(m, b)
}
func (m *NextRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NextRequest.Marshal(b, m, deterministic)
}
func (m *NextRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NextRequest.Merge(m, src)
}
func (m *NextRequest) XXX_Size() int {
	return xxx_messageInfo_NextRequest.Size(m)
}
func (m *NextRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NextRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NextRequest proto.InternalMessageInfo

func (m *NextRequest) GetServiceId() int64 {
	if m != nil {
		return m.ServiceId
	}
	return 0
}

type NextReply struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NextReply) Reset()         { *m = NextReply{} }
func (m *NextReply) String() string { return proto.CompactTextString(m) }
func (*NextReply) ProtoMessage()    {}
func (*NextReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cdb8d9edcdba34d, []int{1}
}

func (m *NextReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NextReply.Unmarshal(m, b)
}
func (m *NextReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NextReply.Marshal(b, m, deterministic)
}
func (m *NextReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NextReply.Merge(m, src)
}
func (m *NextReply) XXX_Size() int {
	return xxx_messageInfo_NextReply.Size(m)
}
func (m *NextReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NextReply.DiscardUnknown(m)
}

var xxx_messageInfo_NextReply proto.InternalMessageInfo

func (m *NextReply) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type StreamReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamReq) Reset()         { *m = StreamReq{} }
func (m *StreamReq) String() string { return proto.CompactTextString(m) }
func (*StreamReq) ProtoMessage()    {}
func (*StreamReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cdb8d9edcdba34d, []int{2}
}

func (m *StreamReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamReq.Unmarshal(m, b)
}
func (m *StreamReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamReq.Marshal(b, m, deterministic)
}
func (m *StreamReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamReq.Merge(m, src)
}
func (m *StreamReq) XXX_Size() int {
	return xxx_messageInfo_StreamReq.Size(m)
}
func (m *StreamReq) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamReq.DiscardUnknown(m)
}

var xxx_messageInfo_StreamReq proto.InternalMessageInfo

func (m *StreamReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type StreamResp struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamResp) Reset()         { *m = StreamResp{} }
func (m *StreamResp) String() string { return proto.CompactTextString(m) }
func (*StreamResp) ProtoMessage()    {}
func (*StreamResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cdb8d9edcdba34d, []int{3}
}

func (m *StreamResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamResp.Unmarshal(m, b)
}
func (m *StreamResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamResp.Marshal(b, m, deterministic)
}
func (m *StreamResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamResp.Merge(m, src)
}
func (m *StreamResp) XXX_Size() int {
	return xxx_messageInfo_StreamResp.Size(m)
}
func (m *StreamResp) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamResp.DiscardUnknown(m)
}

var xxx_messageInfo_StreamResp proto.InternalMessageInfo

func (m *StreamResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*NextRequest)(nil), "snowflake.NextRequest")
	proto.RegisterType((*NextReply)(nil), "snowflake.NextReply")
	proto.RegisterType((*StreamReq)(nil), "snowflake.StreamReq")
	proto.RegisterType((*StreamResp)(nil), "snowflake.StreamResp")
}

func init() { proto.RegisterFile("snow.proto", fileDescriptor_4cdb8d9edcdba34d) }

var fileDescriptor_4cdb8d9edcdba34d = []byte{
	// 218 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0xce, 0xcb, 0x2f,
	0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x04, 0xb1, 0xd3, 0x72, 0x12, 0xb3, 0x53, 0x95,
	0xb4, 0xb9, 0xb8, 0xfd, 0x52, 0x2b, 0x4a, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x64,
	0xb8, 0x38, 0x8b, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x3d, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35,
	0x98, 0x83, 0x10, 0x02, 0x4a, 0xd2, 0x5c, 0x9c, 0x10, 0xc5, 0x05, 0x39, 0x95, 0x42, 0x7c, 0x5c,
	0x4c, 0x99, 0x30, 0x35, 0x4c, 0x99, 0x29, 0x4a, 0xf2, 0x5c, 0x9c, 0xc1, 0x25, 0x45, 0xa9, 0x89,
	0xb9, 0x41, 0xa9, 0x85, 0x42, 0x42, 0x5c, 0x2c, 0x79, 0x89, 0xb9, 0xa9, 0x60, 0x69, 0xce, 0x20,
	0x30, 0x5b, 0x49, 0x8d, 0x8b, 0x0b, 0xa6, 0xa0, 0xb8, 0x40, 0x48, 0x82, 0x8b, 0x3d, 0x37, 0xb5,
	0xb8, 0x38, 0x31, 0x1d, 0xa6, 0x08, 0xc6, 0x35, 0xaa, 0xe7, 0xe2, 0x0c, 0x86, 0xb9, 0x4f, 0xc8,
	0x8c, 0x8b, 0x05, 0x64, 0xa5, 0x90, 0x98, 0x1e, 0xdc, 0xcd, 0x7a, 0x48, 0x0e, 0x96, 0x12, 0xc1,
	0x10, 0x2f, 0xc8, 0xa9, 0x54, 0x62, 0x10, 0xb2, 0xe2, 0x62, 0xf5, 0x48, 0xcd, 0xc9, 0xc9, 0x17,
	0x42, 0x56, 0x00, 0x77, 0x9f, 0x94, 0x28, 0x16, 0xd1, 0xe2, 0x02, 0x25, 0x06, 0x0d, 0x46, 0x03,
	0x46, 0x27, 0xf6, 0x28, 0x56, 0x70, 0x38, 0x25, 0xb1, 0x81, 0x29, 0x63, 0x40, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x9b, 0x8d, 0x1c, 0xda, 0x3c, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SnowflakeClient is the client API for Snowflake service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SnowflakeClient interface {
	Next(ctx context.Context, in *NextRequest, opts ...grpc.CallOption) (*NextReply, error)
	Hello(ctx context.Context, opts ...grpc.CallOption) (Snowflake_HelloClient, error)
}

type snowflakeClient struct {
	cc *grpc.ClientConn
}

func NewSnowflakeClient(cc *grpc.ClientConn) SnowflakeClient {
	return &snowflakeClient{cc}
}

func (c *snowflakeClient) Next(ctx context.Context, in *NextRequest, opts ...grpc.CallOption) (*NextReply, error) {
	out := new(NextReply)
	err := c.cc.Invoke(ctx, "/snowflake.Snowflake/Next", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snowflakeClient) Hello(ctx context.Context, opts ...grpc.CallOption) (Snowflake_HelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Snowflake_serviceDesc.Streams[0], "/snowflake.Snowflake/Hello", opts...)
	if err != nil {
		return nil, err
	}
	x := &snowflakeHelloClient{stream}
	return x, nil
}

type Snowflake_HelloClient interface {
	Send(*StreamReq) error
	Recv() (*StreamResp, error)
	grpc.ClientStream
}

type snowflakeHelloClient struct {
	grpc.ClientStream
}

func (x *snowflakeHelloClient) Send(m *StreamReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *snowflakeHelloClient) Recv() (*StreamResp, error) {
	m := new(StreamResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SnowflakeServer is the server API for Snowflake service.
type SnowflakeServer interface {
	Next(context.Context, *NextRequest) (*NextReply, error)
	Hello(Snowflake_HelloServer) error
}

// UnimplementedSnowflakeServer can be embedded to have forward compatible implementations.
type UnimplementedSnowflakeServer struct {
}

func (*UnimplementedSnowflakeServer) Next(ctx context.Context, req *NextRequest) (*NextReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Next not implemented")
}
func (*UnimplementedSnowflakeServer) Hello(srv Snowflake_HelloServer) error {
	return status.Errorf(codes.Unimplemented, "method Hello not implemented")
}

func RegisterSnowflakeServer(s *grpc.Server, srv SnowflakeServer) {
	s.RegisterService(&_Snowflake_serviceDesc, srv)
}

func _Snowflake_Next_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnowflakeServer).Next(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snowflake.Snowflake/Next",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnowflakeServer).Next(ctx, req.(*NextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snowflake_Hello_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SnowflakeServer).Hello(&snowflakeHelloServer{stream})
}

type Snowflake_HelloServer interface {
	Send(*StreamResp) error
	Recv() (*StreamReq, error)
	grpc.ServerStream
}

type snowflakeHelloServer struct {
	grpc.ServerStream
}

func (x *snowflakeHelloServer) Send(m *StreamResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *snowflakeHelloServer) Recv() (*StreamReq, error) {
	m := new(StreamReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Snowflake_serviceDesc = grpc.ServiceDesc{
	ServiceName: "snowflake.Snowflake",
	HandlerType: (*SnowflakeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Next",
			Handler:    _Snowflake_Next_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Hello",
			Handler:       _Snowflake_Hello_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "snow.proto",
}
